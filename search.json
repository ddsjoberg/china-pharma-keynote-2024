[
  {
    "objectID": "slides/index.html#acknowledgements",
    "href": "slides/index.html#acknowledgements",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Acknowledgements",
    "text": "Acknowledgements\n\n\n\n\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA4.0)."
  },
  {
    "objectID": "slides/index.html#蘇丹杰-daniel-d.-sjoberg",
    "href": "slides/index.html#蘇丹杰-daniel-d.-sjoberg",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "蘇丹杰 (Daniel D. Sjoberg)",
    "text": "蘇丹杰 (Daniel D. Sjoberg)\n\n\n\nSenior Principal Data Scientist at Genentech/Roche\n13+ years at Memorial Sloan Kettering Cancer Center as a Biostatistician\nPublished 250+ papers in peer-reviewed journals and served on Editorial Board of European Urology\nWritten and contributed to many R packages available on CRAN, R Universe, and GitHub.\n\n\n\n\n danieldsjoberg.com\n @ddsjoberg.bsky.social\n social/@ddsjoberg\n linkedin.com/in/ddsjoberg\n github.com/ddsjoberg"
  },
  {
    "objectID": "slides/index.html#outline",
    "href": "slides/index.html#outline",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Outline",
    "text": "Outline\n\n\n\nAnalysis Results Standard (ARS)\nAnalysis Results Data (ARD)\n{cards} + {cardx} R packages\n{gtsummary} R Package"
  },
  {
    "objectID": "slides/index.html#analysis-results-standard-ars",
    "href": "slides/index.html#analysis-results-standard-ars",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Analysis Results Standard (ARS)",
    "text": "Analysis Results Standard (ARS)"
  },
  {
    "objectID": "slides/index.html#analysis-results-standard-ars-1",
    "href": "slides/index.html#analysis-results-standard-ars-1",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Analysis Results Standard (ARS)",
    "text": "Analysis Results Standard (ARS)\n\nEmerging standard for prospectively encoding statistical analysis reporting pipeline in a machine-readable format.\nPrimary objectives are to leverage analysis results metadata to drive the automation of results and support storage, access, processing, traceability and reproducibility of results.\nLogical model that describes analysis results and associated metadata.\nFocus on concepts, not layout, e.g. the summary statistics, not how the results are shown in a table.\nLearn more at https://www.cdisc.org/events/webinar/analysis-results-standard-public-review"
  },
  {
    "objectID": "slides/index.html#analysis-results-standard-ars-2",
    "href": "slides/index.html#analysis-results-standard-ars-2",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Analysis Results Standard (ARS)",
    "text": "Analysis Results Standard (ARS)\nExample ARS Flow\n\n\n\nOverview of the meta data\n\nthe data sets\nthe exclusions (e.g. ITT population)\nI know the details here are sparse, but we need to get the meat of this presentation!\n\nOverview of ARD\n\nStructured object to save summary results\nCan be used for simply summary statistics or complex analyses\nWe can also save instructions formatting the results\n\nLastly, TLGs\n\nWe’re all familiar with the TLGs, I presume.\nThe ARS fills the gap between ADaM and TLGs"
  },
  {
    "objectID": "slides/index.html#analysis-results-standard-ars-3",
    "href": "slides/index.html#analysis-results-standard-ars-3",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Analysis Results Standard (ARS)",
    "text": "Analysis Results Standard (ARS)\nExample ARS Flow\n\n\n\n{cards} helps us easily build analysis results data sets\n\nYES, THIS IS A DRAFT HEX STICKER\n\nafter the re-factor is complete, gtsummary will help us build tables from ARDs"
  },
  {
    "objectID": "slides/index.html#analysis-results-data-ard",
    "href": "slides/index.html#analysis-results-data-ard",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Analysis Results Data (ARD)",
    "text": "Analysis Results Data (ARD)\n\nEncodes statistical analysis outcomes in a machine-readable format.\nPrimary objective is to streamline the processes of automation, ensuring reproducibility, promoting reusability, and enhancing traceability.\nThe ARD model specified how statistical results are saved into a structured format.\nThe ARD can be used to to subsequently create tables and figures.\nAfter the initial creation of an ARD, the results can later be re-used again and again for subsequent reporting needs; for example, re-creating a figure with only two of the three treatment arms shown, or pruning a large complex table to show only the most interesting results for a presentation (when the initial results may been prepared for regulatory purposes)."
  },
  {
    "objectID": "slides/index.html#analysis-results-data-ard-1",
    "href": "slides/index.html#analysis-results-data-ard-1",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Analysis Results Data (ARD)",
    "text": "Analysis Results Data (ARD)\n\nEncodes statistical analysis outcomes in a machine-readable format.\nPrimary objective is to streamline the processes of automation, ensuring reproducibility, promoting reusability, and enhancing traceability.\nThe ARD model specified how statistical results are saved into a structured format.\nThe ARD can be used to to subsequently create tables and figures."
  },
  {
    "objectID": "slides/index.html#analysis-results-data-ard-2",
    "href": "slides/index.html#analysis-results-data-ard-2",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Analysis Results Data (ARD)",
    "text": "Analysis Results Data (ARD)\n\nAfter the initial creation of an ARD, the results can later be re-used again and again for subsequent reporting needs.\n\n\n\n\nRe-creating a figure with only two of the three treatment arms shown, or pruning a large complex table to show only the most interesting results for a presentation (when the initial results may been prepared for regulatory purposes)."
  },
  {
    "objectID": "slides/index.html#cards-r-package",
    "href": "slides/index.html#cards-r-package",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{cards} R Package ",
    "text": "{cards} R Package \nLet’s check out a simple example\n\nlibrary(cards)\n\n# create ARD with default summary statistics\nard_continuous(ADSL, variables = AGE)\n\n{cards} data frame: 8 x 8\n\n\n  variable   context stat_name stat_label   stat fmt_fn\n1      AGE continuo…         N          N    254      0\n2      AGE continuo…      mean       Mean 75.087      1\n3      AGE continuo…        sd         SD  8.246      1\n4      AGE continuo…    median     Median     77      1\n5      AGE continuo…       p25  25th Per…     70      1\n6      AGE continuo…       p75  75th Per…     81      1\n7      AGE continuo…       min        Min     51      1\n8      AGE continuo…       max        Max     89      1\n\n\nℹ 2 more variables: warning, error\n\n\n\n\none line per statistic\nincludes default set of summary statistics\ndefault formatting function (in this case, the integer is shortcut to format/round to 1 decimal place)\na simple data frame result, which means it is easy to work with a modify"
  },
  {
    "objectID": "slides/index.html#cards-ard_continuous-arguments",
    "href": "slides/index.html#cards-ard_continuous-arguments",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{cards}: ard_continuous() arguments",
    "text": "{cards}: ard_continuous() arguments\n\n\nby: summary statistics are calculated by all combinations of the by variables, including unobserved factor levels\nstatistic: specify univariate summary statistics. Accepts any function, base R, from a package, or user-defined.\nfmt_fn: Override the default formatting functions, e.g. when you need\n\n\n\nADSL |&gt; \n  ard_continuous(\n    variables = AGE,\n    by = ARM, # calculate summary stats by treatment arm\n    statistic = ~list(mean = \\(x) mean(x, na.rm = TRUE)), # return the mean\n    fmt_fn = ~list(mean = 0) # format the result\n  ) |&gt; \n  apply_fmt_fn() # add a character column of rounded results\n\n{cards} data frame: 3 x 11\n\n\n  group1 group1_level variable stat_name stat_label   stat stat_fmt\n1    ARM      Placebo      AGE      mean       Mean 75.209       75\n2    ARM    Xanomeli…      AGE      mean       Mean 74.381       74\n3    ARM    Xanomeli…      AGE      mean       Mean 75.667       76\n\n\nℹ 4 more variables: context, fmt_fn, warning, error"
  },
  {
    "objectID": "slides/index.html#cards-ard_categorical",
    "href": "slides/index.html#cards-ard_categorical",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{cards}: ard_categorical()",
    "text": "{cards}: ard_categorical()\n\nADSL |&gt; \n  ard_categorical(\n    by = ARM,\n    variables = AGEGR1\n  ) |&gt; \n  dplyr::filter(stat_name %in% c(\"n\", \"p\")) |&gt; # keep most common stats \n  print(n = 8)\n\n{cards} data frame: 18 x 11\n\n\n  group1 group1_level variable variable_level stat_name stat_label  stat\n1    ARM      Placebo   AGEGR1            &lt;65         n          n    14\n2    ARM      Placebo   AGEGR1            &lt;65         p          % 0.163\n3    ARM    Xanomeli…   AGEGR1            &lt;65         n          n    11\n4    ARM    Xanomeli…   AGEGR1            &lt;65         p          % 0.131\n5    ARM    Xanomeli…   AGEGR1            &lt;65         n          n     8\n6    ARM    Xanomeli…   AGEGR1            &lt;65         p          % 0.095\n7    ARM      Placebo   AGEGR1            &gt;80         n          n    30\n8    ARM      Placebo   AGEGR1            &gt;80         p          % 0.349\n\n\nℹ 10 more rows\n\n\nℹ Use `print(n = ...)` to see more rows\n\n\nℹ 4 more variables: context, fmt_fn, warning, error\n\n\n\nAny unobserved levels of the variables will be present in the resulting ARD."
  },
  {
    "objectID": "slides/index.html#cards-other-summary-functions",
    "href": "slides/index.html#cards-other-summary-functions",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{cards}: Other Summary Functions",
    "text": "{cards}: Other Summary Functions\n\nard_hierarchical(): similar to ard_categorical(), but built for nested tabulations, e.g. AE terms within SOC\nard_dichotomous(): similar to ard_categorical(), and tabulates a single value of the variable\nard_complex(): similar to ard_continuous(), but the summary functions can be more complex and accepts other arguments like the full and subsetted (within the by groups) data sets.\nard_missing(): tabulates rates of missingness\n\nThe results from all these functions are entirely compatible with one another, and can be stacked into a single data frame."
  },
  {
    "objectID": "slides/index.html#cards-other-functions",
    "href": "slides/index.html#cards-other-functions",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{cards}: Other Functions",
    "text": "{cards}: Other Functions\nIn addition to exporting functions to prepare summaries, {cards} exports many utilities for wrangling ARDs and creating new ARDs.\nConstructing: bind_ard(), tidy_as_ard(), nest_for_ard(), check_ard_structure(), and many more\nWrangling: shuffle_ard(), get_ard_statistics(), replace_null_statistic(), etc.\n\n\ntidy_as_ard() is USED everywhere!"
  },
  {
    "objectID": "slides/index.html#cardx-r-package",
    "href": "slides/index.html#cardx-r-package",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{cardx} R Package ",
    "text": "{cardx} R Package \n\nWhile {cards} performs basic (and very common) summaries, {cardx} exports ard_*() functions for more complex analytic results.\nThe list is growing, but we have functions for t-tests, Wilcoxon tests, standardized mean differences, ANOVA (including repeated measures), survey methods, confidence intervals for proportions and centrality estimates, and more.\nElegant solution for nearly every regression model type in the R ecosystem, where we can identify regression types (linear, logistic, Cox, etc.), identify the underlying variable names for categorical variables (different from the model terms), identify reference groups for categorical variables, and much much more.\n\n\nYes, this is also a draft hex sticker!"
  },
  {
    "objectID": "slides/index.html#cardx-1",
    "href": "slides/index.html#cardx-1",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{cardx}",
    "text": "{cardx}\nSupported regression model types include:\n\nbetareg::betareg(), biglm::bigglm(), biglmm::bigglm(), brms::brm(), cmprsk::crr(), fixest::feglm(), fixest::femlm(), fixest::feNmlm(), fixest::feols(), gam::gam(), geepack::geeglm(), glmmTMB::glmmTMB(), lavaan::lavaan(), lfe::felm(), lme4::glmer.nb(), lme4::glmer(), lme4::lmer(), logitr::logitr(), MASS::glm.nb(), MASS::polr(), mgcv::gam(), mice::mira, mmrm::mmrm(), multgee::nomLORgee(), multgee::ordLORgee(), nnet::multinom(), ordinal::clm(), ordinal::clmm(), parsnip::model_fit, plm::plm(), pscl::hurdle(), pscl::zeroinfl(), rstanarm::stan_glm(), stats::aov(), stats::glm(), stats::lm(), stats::nls(), survey::svycoxph(), survey::svyglm(), survey::svyolr(), survival::cch(), survival::clogit(), survival::coxph(), survival::survreg(), tidycmprsk::crr(), VGAM::vglm()."
  },
  {
    "objectID": "slides/index.html#cardx-in-practice",
    "href": "slides/index.html#cardx-in-practice",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{cardx} in Practice",
    "text": "{cardx} in Practice\nIn the example below, we’re adding a confidence interval around the rate of subjects who completed the study.\nWe’re using the default computation method (Wald) and confidence level (95%).\n\ncards::ADSL |&gt; \n  dplyr::mutate(COMPLETED = DCDECOD == \"COMPLETED\") |&gt; \n  cardx::ard_proportion_ci(variables = COMPLETED) # using default CI method 'Wald'\n\n{cards} data frame: 6 x 8\n\n\n   variable   context  stat_name stat_label      stat fmt_fn\n1 COMPLETED proporti…          N          N       254      0\n2 COMPLETED proporti…   estimate   estimate     0.433      1\n3 COMPLETED proporti…   conf.low   conf.low      0.37      1\n4 COMPLETED proporti…  conf.high  conf.high     0.496      1\n5 COMPLETED proporti… conf.level  conf.lev…      0.95      1\n6 COMPLETED proporti…     method     method Wald Con…   &lt;fn&gt;\n\n\nℹ 2 more variables: warning, error"
  },
  {
    "objectID": "slides/index.html#cardx-in-practice-gone-wrong",
    "href": "slides/index.html#cardx-in-practice-gone-wrong",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{cardx} in Practice: Gone Wrong 😱",
    "text": "{cardx} in Practice: Gone Wrong 😱\nWhat happens when statistics are un-calculable?\n(It’s one of my favorite features of {cards} and {cardx})\n\nard_gone_wrong &lt;- \n  cards::ADSL |&gt; \n  cards::ard_continuous(\n    variable = AGEGR1,\n    statistic = ~list(kurtosis = \\(x) e1071::kurtosis(x, na.rm = TRUE))\n  )\nard_gone_wrong\n\n{cards} data frame: 1 x 8\n\n\n  variable stat_name stat_label stat   warning     error\n1   AGEGR1  kurtosis   kurtosis      argument… non-nume…\n\n\nℹ 2 more variables: context, fmt_fn\n\n\n\nprint_ard_conditions(ard_gone_wrong)\n\n\n\n\nEven when there are errors or warnings, we still get the ARD with the expected structure returned.\n\nTHIS IS BIG! There are MANY circumstances, when you are designing TLGs early in a study when you do not have all the data required to calculate every statistic.\nThis allows you to design everything up-front.\n\nWe can also report these warnings and errors back to users. &lt;!CLICK!&gt;"
  },
  {
    "objectID": "slides/index.html#gtsummary-background",
    "href": "slides/index.html#gtsummary-background",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{gtsummary} Background ",
    "text": "{gtsummary} Background \n\nBorn from my time as a biostatistician at Memorial Sloan Kettering Cancer Center.\nI led a team of other statisticians and I wanted us to transition to R.\nBegan writing a package that eventually became {gtsummary} to help make this transition smooth.\nSince then the package grew and grew, and is now the most downloaded summary table package on CRAN.\nPackage the American Statistical Association’s (ASA) 2021 award for Innovation in Statistical Programming and Analytics"
  },
  {
    "objectID": "slides/index.html#gtsummary-r-package",
    "href": "slides/index.html#gtsummary-r-package",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{gtsummary} R Package",
    "text": "{gtsummary} R Package\n\n\n\ngtsummary tables are composable, that leads to a wonderful user experience\nno more needing to memorize an enormous function with too many arguments"
  },
  {
    "objectID": "slides/index.html#gtsummary-r-package-1",
    "href": "slides/index.html#gtsummary-r-package-1",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{gtsummary} R Package",
    "text": "{gtsummary} R Package\n\n\n\na gtsummary table can be converted into any of these types, and styling and formatting functions from those packages can be used to continue to make the table exactly as you’d like.\neach of these engines have their own strengths\nthere is a lot more i could share about the package: I’ve never given a three-slide summary of its features before!"
  },
  {
    "objectID": "slides/index.html#cards-gtsummary",
    "href": "slides/index.html#cards-gtsummary",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{cards} + {gtsummary}",
    "text": "{cards} + {gtsummary}\nHow is this related to ARD and the {cards} package? 🤔🤔\n\nThe {cards} package does not present results and this is where the {gtsummary} package shines.\nThe {gtsummary} package is currently being refactored with a {cards} backend.\nIn addition to a refactor, adding new features making it easier to create common pharma tables."
  },
  {
    "objectID": "slides/index.html#cards-gtsummary-1",
    "href": "slides/index.html#cards-gtsummary-1",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "{cards} + {gtsummary}",
    "text": "{cards} + {gtsummary}"
  },
  {
    "objectID": "slides/index.html#stay-tuned",
    "href": "slides/index.html#stay-tuned",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Stay Tuned!",
    "text": "Stay Tuned!\n\n\n\nExpect new releases of {cards}, {cardx}, and {gtsummary} soon!\nThese packages working together will serve as a strong combination for ARD-first TLG creation in the pharmaceutical space.\n\n\n\n\n\n\n\n\n\n\n\n\nAnd I will get to these hux logos too!\nIf you have suggestions, please join the conversation.\n\nAny questions??"
  },
  {
    "objectID": "slides/index.html#mock-tables",
    "href": "slides/index.html#mock-tables",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Mock Tables",
    "text": "Mock Tables\n\nWith {cards}+{gtsummary} it’s easy to create bespoke table shells.\n\n\ncards::ADSL |&gt; \n  cards::ard_continuous(\n    variables = AGE, \n    fmt_fn = ~list(everything() ~ \\(x) \"xx\")\n  ) |&gt; \n  cards::apply_fmt_fn() |&gt; \n  print(n = 3)\n\n  variable   context stat_name stat_label   stat stat_fmt\n1      AGE continuo…         N          N    254       xx\n2      AGE continuo…      mean       Mean 75.087       xx\n3      AGE continuo…        sd         SD  8.246       xx\n\n\n\nPass this ARD to card_summary() and the table will be populated with \"xx\" placeholders."
  },
  {
    "objectID": "slides/index.html#mock-tables-1",
    "href": "slides/index.html#mock-tables-1",
    "title": "CDISC Analysis Results Data with {cards} + {gtsummary}",
    "section": "Mock Tables",
    "text": "Mock Tables\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nPlacebo\nN = xx\nXanomeline Low Dose\nN = xx\nXanomeline High Dose\nN = xx\n\n\n\n\nAge\n\n\n\n\n\n\n\n\n    Median (IQR)\nxx (xx, xx)\nxx (xx, xx)\nxx (xx, xx)\n\n\n    Mean (SD)\nxx (xx)\nxx (xx)\nxx (xx)\n\n\n    Range\nxx - xx\nxx - xx\nxx - xx\n\n\nAge Group, n (%)\n\n\n\n\n\n\n\n\n    &lt;65\nxx (xx.x%)\nxx (xx.x%)\nxx (xx.x%)\n\n\n    65-80\nxx (xx.x%)\nxx (xx.x%)\nxx (xx.x%)\n\n\n    &gt;80\nxx (xx.x%)\nxx (xx.x%)\nxx (xx.x%)\n\n\n\n\n\n\n\n\n\n\n\n\nCDISC Analysis Results Data with {cards}+{gtsummary}"
  },
  {
    "objectID": "slides/04-cardx.html",
    "href": "slides/04-cardx.html",
    "title": "{cardx}",
    "section": "",
    "text": "While {cards} performs basic (and very common) summaries, {cardx} exports ard_*() functions for more complex analytic results.\nThe list is growing, but we have functions for t-tests, Wilcoxon tests, standardized mean differences, ANOVA (including repeated measures), survey methods, confidence intervals for proportions and centrality estimates, and more.\nElegant solution for nearly every regression model type in the R ecosystem, where we can identify regression types (linear, logistic, Cox, etc.), identify the underlying variable names for categorical variables (different from the model terms), identify reference groups for categorical variables, and much much more.\n\n\nYes, this is also a draft hex sticker!\n\n\n\n\nSupported regression model types include:\n\nbetareg::betareg(), biglm::bigglm(), biglmm::bigglm(), brms::brm(), cmprsk::crr(), fixest::feglm(), fixest::femlm(), fixest::feNmlm(), fixest::feols(), gam::gam(), geepack::geeglm(), glmmTMB::glmmTMB(), lavaan::lavaan(), lfe::felm(), lme4::glmer.nb(), lme4::glmer(), lme4::lmer(), logitr::logitr(), MASS::glm.nb(), MASS::polr(), mgcv::gam(), mice::mira, mmrm::mmrm(), multgee::nomLORgee(), multgee::ordLORgee(), nnet::multinom(), ordinal::clm(), ordinal::clmm(), parsnip::model_fit, plm::plm(), pscl::hurdle(), pscl::zeroinfl(), rstanarm::stan_glm(), stats::aov(), stats::glm(), stats::lm(), stats::nls(), survey::svycoxph(), survey::svyglm(), survey::svyolr(), survival::cch(), survival::clogit(), survival::coxph(), survival::survreg(), tidycmprsk::crr(), VGAM::vglm().\n\n\n\n\nIn the example below, we’re adding a confidence interval around the rate of subjects who completed the study.\nWe’re using the default computation method (Wald) and confidence level (95%).\n\ncards::ADSL |&gt; \n  dplyr::mutate(COMPLETED = DCDECOD == \"COMPLETED\") |&gt; \n  cardx::ard_proportion_ci(variables = COMPLETED) # using default CI method 'Wald'\n\n{cards} data frame: 6 x 8\n\n\n   variable   context  stat_name stat_label      stat fmt_fn\n1 COMPLETED proporti…          N          N       254      0\n2 COMPLETED proporti…   estimate   estimate     0.433      1\n3 COMPLETED proporti…   conf.low   conf.low      0.37      1\n4 COMPLETED proporti…  conf.high  conf.high     0.496      1\n5 COMPLETED proporti… conf.level  conf.lev…      0.95      1\n6 COMPLETED proporti…     method     method Wald Con…   &lt;fn&gt;\n\n\nℹ 2 more variables: warning, error\n\n\n\n\n\nWhat happens when statistics are un-calculable?\n(It’s one of my favorite features of {cards} and {cardx})\n\nard_gone_wrong &lt;- \n  cards::ADSL |&gt; \n  cards::ard_continuous(\n    variable = AGEGR1,\n    statistic = ~list(kurtosis = \\(x) e1071::kurtosis(x, na.rm = TRUE))\n  )\nard_gone_wrong\n\n{cards} data frame: 1 x 8\n\n\n  variable stat_name stat_label stat   warning     error\n1   AGEGR1  kurtosis   kurtosis      argument… non-nume…\n\n\nℹ 2 more variables: context, fmt_fn\n\n\n\nprint_ard_conditions(ard_gone_wrong)\n\n\n\n\nEven when there are errors or warnings, we still get the ARD with the expected structure returned.\n\nTHIS IS BIG! There are MANY circumstances, when you are designing TLGs early in a study when you do not have all the data required to calculate every statistic.\nThis allows you to design everything up-front.\n\nWe can also report these warnings and errors back to users. &lt;!CLICK!&gt;"
  },
  {
    "objectID": "slides/04-cardx.html#cardx-r-package",
    "href": "slides/04-cardx.html#cardx-r-package",
    "title": "{cardx}",
    "section": "",
    "text": "While {cards} performs basic (and very common) summaries, {cardx} exports ard_*() functions for more complex analytic results.\nThe list is growing, but we have functions for t-tests, Wilcoxon tests, standardized mean differences, ANOVA (including repeated measures), survey methods, confidence intervals for proportions and centrality estimates, and more.\nElegant solution for nearly every regression model type in the R ecosystem, where we can identify regression types (linear, logistic, Cox, etc.), identify the underlying variable names for categorical variables (different from the model terms), identify reference groups for categorical variables, and much much more.\n\n\nYes, this is also a draft hex sticker!"
  },
  {
    "objectID": "slides/04-cardx.html#cardx-1",
    "href": "slides/04-cardx.html#cardx-1",
    "title": "{cardx}",
    "section": "",
    "text": "Supported regression model types include:\n\nbetareg::betareg(), biglm::bigglm(), biglmm::bigglm(), brms::brm(), cmprsk::crr(), fixest::feglm(), fixest::femlm(), fixest::feNmlm(), fixest::feols(), gam::gam(), geepack::geeglm(), glmmTMB::glmmTMB(), lavaan::lavaan(), lfe::felm(), lme4::glmer.nb(), lme4::glmer(), lme4::lmer(), logitr::logitr(), MASS::glm.nb(), MASS::polr(), mgcv::gam(), mice::mira, mmrm::mmrm(), multgee::nomLORgee(), multgee::ordLORgee(), nnet::multinom(), ordinal::clm(), ordinal::clmm(), parsnip::model_fit, plm::plm(), pscl::hurdle(), pscl::zeroinfl(), rstanarm::stan_glm(), stats::aov(), stats::glm(), stats::lm(), stats::nls(), survey::svycoxph(), survey::svyglm(), survey::svyolr(), survival::cch(), survival::clogit(), survival::coxph(), survival::survreg(), tidycmprsk::crr(), VGAM::vglm()."
  },
  {
    "objectID": "slides/04-cardx.html#cardx-in-practice",
    "href": "slides/04-cardx.html#cardx-in-practice",
    "title": "{cardx}",
    "section": "",
    "text": "In the example below, we’re adding a confidence interval around the rate of subjects who completed the study.\nWe’re using the default computation method (Wald) and confidence level (95%).\n\ncards::ADSL |&gt; \n  dplyr::mutate(COMPLETED = DCDECOD == \"COMPLETED\") |&gt; \n  cardx::ard_proportion_ci(variables = COMPLETED) # using default CI method 'Wald'\n\n{cards} data frame: 6 x 8\n\n\n   variable   context  stat_name stat_label      stat fmt_fn\n1 COMPLETED proporti…          N          N       254      0\n2 COMPLETED proporti…   estimate   estimate     0.433      1\n3 COMPLETED proporti…   conf.low   conf.low      0.37      1\n4 COMPLETED proporti…  conf.high  conf.high     0.496      1\n5 COMPLETED proporti… conf.level  conf.lev…      0.95      1\n6 COMPLETED proporti…     method     method Wald Con…   &lt;fn&gt;\n\n\nℹ 2 more variables: warning, error"
  },
  {
    "objectID": "slides/04-cardx.html#cardx-in-practice-gone-wrong",
    "href": "slides/04-cardx.html#cardx-in-practice-gone-wrong",
    "title": "{cardx}",
    "section": "",
    "text": "What happens when statistics are un-calculable?\n(It’s one of my favorite features of {cards} and {cardx})\n\nard_gone_wrong &lt;- \n  cards::ADSL |&gt; \n  cards::ard_continuous(\n    variable = AGEGR1,\n    statistic = ~list(kurtosis = \\(x) e1071::kurtosis(x, na.rm = TRUE))\n  )\nard_gone_wrong\n\n{cards} data frame: 1 x 8\n\n\n  variable stat_name stat_label stat   warning     error\n1   AGEGR1  kurtosis   kurtosis      argument… non-nume…\n\n\nℹ 2 more variables: context, fmt_fn\n\n\n\nprint_ard_conditions(ard_gone_wrong)\n\n\n\n\nEven when there are errors or warnings, we still get the ARD with the expected structure returned.\n\nTHIS IS BIG! There are MANY circumstances, when you are designing TLGs early in a study when you do not have all the data required to calculate every statistic.\nThis allows you to design everything up-front.\n\nWe can also report these warnings and errors back to users. &lt;!CLICK!&gt;"
  },
  {
    "objectID": "slides/02-ard.html",
    "href": "slides/02-ard.html",
    "title": "Analysis Results Data",
    "section": "",
    "text": "Encodes statistical analysis outcomes in a machine-readable format.\nPrimary objective is to streamline the processes of automation, ensuring reproducibility, promoting reusability, and enhancing traceability.\nThe ARD model specified how statistical results are saved into a structured format.\nThe ARD can be used to to subsequently create tables and figures.\n\n\n\n\n\nAfter the initial creation of an ARD, the results can later be re-used again and again for subsequent reporting needs.\n\n\n\n\n\n\n\n\nRe-creating a figure with only two of the three treatment arms shown, or pruning a large complex table to show only the most interesting results for a presentation (when the initial results may been prepared for regulatory purposes)."
  },
  {
    "objectID": "slides/02-ard.html#analysis-results-data-ard",
    "href": "slides/02-ard.html#analysis-results-data-ard",
    "title": "Analysis Results Data",
    "section": "",
    "text": "Encodes statistical analysis outcomes in a machine-readable format.\nPrimary objective is to streamline the processes of automation, ensuring reproducibility, promoting reusability, and enhancing traceability.\nThe ARD model specified how statistical results are saved into a structured format.\nThe ARD can be used to to subsequently create tables and figures."
  },
  {
    "objectID": "slides/02-ard.html#analysis-results-data-ard-1",
    "href": "slides/02-ard.html#analysis-results-data-ard-1",
    "title": "Analysis Results Data",
    "section": "",
    "text": "After the initial creation of an ARD, the results can later be re-used again and again for subsequent reporting needs.\n\n\n\n\n\n\n\n\nRe-creating a figure with only two of the three treatment arms shown, or pruning a large complex table to show only the most interesting results for a presentation (when the initial results may been prepared for regulatory purposes)."
  },
  {
    "objectID": "slides/00-setup.html",
    "href": "slides/00-setup.html",
    "title": "CDISC Analysis Results Data with {cards}+{gtsummary}",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA4.0)."
  },
  {
    "objectID": "slides/00-setup.html#acknowledgements",
    "href": "slides/00-setup.html#acknowledgements",
    "title": "CDISC Analysis Results Data with {cards}+{gtsummary}",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License (CC BY-SA4.0)."
  },
  {
    "objectID": "slides/00-setup.html#蘇丹杰-daniel-d.-sjoberg",
    "href": "slides/00-setup.html#蘇丹杰-daniel-d.-sjoberg",
    "title": "CDISC Analysis Results Data with {cards}+{gtsummary}",
    "section": "蘇丹杰 (Daniel D. Sjoberg)",
    "text": "蘇丹杰 (Daniel D. Sjoberg)\n\n\n\nSenior Principal Data Scientist at Genentech/Roche\n13+ years at Memorial Sloan Kettering Cancer Center as a Biostatistician\nPublished 250+ papers in peer-reviewed journals and served on Editorial Board of European Urology\nWritten and contributed to many R packages available on CRAN, R Universe, and GitHub.\n\n\n\n\nr fontawesome::fa(\"link\", fill = fa_fill) danieldsjoberg.com\nr fontawesome::fa(\"cloud\", fill = fa_fill) @ddsjoberg.bsky.social\nr fontawesome::fa(\"mastodon\", fill = fa_fill) social/@ddsjoberg\nr fontawesome::fa(\"linkedin\", fill = fa_fill) linkedin.com/in/ddsjoberg\nr fontawesome::fa(\"github\", fill = fa_fill) github.com/ddsjoberg"
  },
  {
    "objectID": "slides/00-setup.html#outline",
    "href": "slides/00-setup.html#outline",
    "title": "CDISC Analysis Results Data with {cards}+{gtsummary}",
    "section": "Outline",
    "text": "Outline\n\n\n\nAnalysis Results Standard (ARS)\nAnalysis Results Data (ARD)\n{cards} + {cardx} R packages\n{gtsummary} R Package"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "License",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution 4.0 International License.",
    "crumbs": [
      "License"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CDISC Analysis Results Data with {cards}+{gtsummary}",
    "section": "",
    "text": "🗓️ March 29, 2024 | 09:15 - 09:45 CST\n🏨 Novartis Campus, Shanghai, China\n💥 Conference Registration (¥150)\n\n\nAbstract\nThe CDISC Analysis Results Data (ARD) Model is an emerging standard for encoding statistical analysis outcomes in a machine-readable format. Its primary objective is to streamline the processes of automation, ensuring reproducibility, promoting reusability, and enhancing traceability.\nThe {cards} R package offers a range of functions for ARD generation, from basic univariate summaries like means and tabulations to complex multivariable summaries encompassing regression models and statistical tests.\nThe package includes functionalities to represent results in various formats, including JSON and YAML. Thanks to its flexible structures, the {cards} package can be harnessed in diverse applications, such as generating tables for regulatory submissions and conducting quality control checks on existing tables. Furthermore, the {cards} ARD object can be accessed through a REST API, allowing writers to dynamically incorporate table results into reports.\nWhile {cards} calculates statistics and stores them in a structured object, it cannot present those results; this, however, is where the {gtsummary} package shines. The {gtsummary} package offers a modular framework to construct summary tables. It is the most widely used package for summary tables in the healthcare/pharmaceutical space, and won the American Statistical Association’s 2021 award for Innovation in Statistical Programming and Analytics. The {gtsummary} package is currently being refactored to utilize {cards} as its backend, which will allow users to both extract an ARD object from a {gtsummary} table and use an ARD object to construct a {gtsummary} table. The {cards} and {gtsummary} packages stand as robust and versatile tools, poised to assist in a multitude of analytical endeavors.\n\n\nPresenter\n\n蘇丹杰 (Daniel D. Sjoberg) (he/him) is a Senior Principal Data Scientist at Genentech. Previously, he was a Lead Data Science Manager at the Prostate Cancer Clinical Trials Consortium, and a Senior Biostatistician at Memorial Sloan Kettering Cancer Center in New York City. He enjoys R package development, creating many packages available on CRAN, R-Universe, and GitHub. His research interests include adaptive methods in clinical trials, precision medicine, and predictive modeling. Daniel is the winner of the 2021 American Statistical Association (ASA) Innovation in Statistical Programming and Analytics award.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "material.html",
    "href": "material.html",
    "title": "Material",
    "section": "",
    "text": "View slides in full screen",
    "crumbs": [
      "Materials"
    ]
  },
  {
    "objectID": "slides/01-ars.html",
    "href": "slides/01-ars.html",
    "title": "Analysis Results Standard",
    "section": "",
    "text": "Emerging standard for prospectively encoding statistical analysis reporting pipeline in a machine-readable format.\nPrimary objectives are to leverage analysis results metadata to drive the automation of results and support storage, access, processing, traceability and reproducibility of results.\nLogical model that describes analysis results and associated metadata.\nFocus on concepts, not layout, e.g. the summary statistics, not how the results are shown in a table.\nLearn more at https://www.cdisc.org/events/webinar/analysis-results-standard-public-review\n\n\n\n\nExample ARS Flow\n\n\n\n\n\n\n\nOverview of the meta data\n\nthe data sets\nthe exclusions (e.g. ITT population)\nI know the details here are sparse, but we need to get the meat of this presentation!\n\nOverview of ARD\n\nStructured object to save summary results\nCan be used for simply summary statistics or complex analyses\nWe can also save instructions formatting the results\n\nLastly, TLGs\n\nWe’re all familiar with the TLGs, I presume.\nThe ARS fills the gap between ADaM and TLGs\n\n\n\n\n\n\nExample ARS Flow\n\n\n\n\n\n\n\n{cards} helps us easily build analysis results data sets\n\nYES, THIS IS A DRAFT HEX STICKER\n\nafter the re-factor is complete, gtsummary will help us build tables from ARDs\n\n\n\n\n\n\nEncodes statistical analysis outcomes in a machine-readable format.\nPrimary objective is to streamline the processes of automation, ensuring reproducibility, promoting reusability, and enhancing traceability.\nThe ARD model specified how statistical results are saved into a structured format.\nThe ARD can be used to to subsequently create tables and figures.\nAfter the initial creation of an ARD, the results can later be re-used again and again for subsequent reporting needs; for example, re-creating a figure with only two of the three treatment arms shown, or pruning a large complex table to show only the most interesting results for a presentation (when the initial results may been prepared for regulatory purposes)."
  },
  {
    "objectID": "slides/01-ars.html#analysis-results-standard-ars-1",
    "href": "slides/01-ars.html#analysis-results-standard-ars-1",
    "title": "Analysis Results Standard",
    "section": "",
    "text": "Emerging standard for prospectively encoding statistical analysis reporting pipeline in a machine-readable format.\nPrimary objectives are to leverage analysis results metadata to drive the automation of results and support storage, access, processing, traceability and reproducibility of results.\nLogical model that describes analysis results and associated metadata.\nFocus on concepts, not layout, e.g. the summary statistics, not how the results are shown in a table.\nLearn more at https://www.cdisc.org/events/webinar/analysis-results-standard-public-review"
  },
  {
    "objectID": "slides/01-ars.html#analysis-results-standard-ars-2",
    "href": "slides/01-ars.html#analysis-results-standard-ars-2",
    "title": "Analysis Results Standard",
    "section": "",
    "text": "Example ARS Flow\n\n\n\n\n\n\n\nOverview of the meta data\n\nthe data sets\nthe exclusions (e.g. ITT population)\nI know the details here are sparse, but we need to get the meat of this presentation!\n\nOverview of ARD\n\nStructured object to save summary results\nCan be used for simply summary statistics or complex analyses\nWe can also save instructions formatting the results\n\nLastly, TLGs\n\nWe’re all familiar with the TLGs, I presume.\nThe ARS fills the gap between ADaM and TLGs"
  },
  {
    "objectID": "slides/01-ars.html#analysis-results-standard-ars-3",
    "href": "slides/01-ars.html#analysis-results-standard-ars-3",
    "title": "Analysis Results Standard",
    "section": "",
    "text": "Example ARS Flow\n\n\n\n\n\n\n\n{cards} helps us easily build analysis results data sets\n\nYES, THIS IS A DRAFT HEX STICKER\n\nafter the re-factor is complete, gtsummary will help us build tables from ARDs"
  },
  {
    "objectID": "slides/01-ars.html#analysis-results-data-ard",
    "href": "slides/01-ars.html#analysis-results-data-ard",
    "title": "Analysis Results Standard",
    "section": "",
    "text": "Encodes statistical analysis outcomes in a machine-readable format.\nPrimary objective is to streamline the processes of automation, ensuring reproducibility, promoting reusability, and enhancing traceability.\nThe ARD model specified how statistical results are saved into a structured format.\nThe ARD can be used to to subsequently create tables and figures.\nAfter the initial creation of an ARD, the results can later be re-used again and again for subsequent reporting needs; for example, re-creating a figure with only two of the three treatment arms shown, or pruning a large complex table to show only the most interesting results for a presentation (when the initial results may been prepared for regulatory purposes)."
  },
  {
    "objectID": "slides/03-cards.html",
    "href": "slides/03-cards.html",
    "title": "{cards}",
    "section": "",
    "text": "Let’s check out a simple example\n\nlibrary(cards)\n\n# create ARD with default summary statistics\nard_continuous(ADSL, variables = AGE)\n\n{cards} data frame: 8 x 8\n\n\n  variable   context stat_name stat_label   stat fmt_fn\n1      AGE continuo…         N          N    254      0\n2      AGE continuo…      mean       Mean 75.087      1\n3      AGE continuo…        sd         SD  8.246      1\n4      AGE continuo…    median     Median     77      1\n5      AGE continuo…       p25  25th Per…     70      1\n6      AGE continuo…       p75  75th Per…     81      1\n7      AGE continuo…       min        Min     51      1\n8      AGE continuo…       max        Max     89      1\n\n\nℹ 2 more variables: warning, error\n\n\n\n\none line per statistic\nincludes default set of summary statistics\ndefault formatting function (in this case, the integer is shortcut to format/round to 1 decimal place)\na simple data frame result, which means it is easy to work with a modify\n\n\n\n\n\n\n\nby: summary statistics are calculated by all combinations of the by variables, including unobserved factor levels\nstatistic: specify univariate summary statistics. Accepts any function, base R, from a package, or user-defined.\nfmt_fn: Override the default formatting functions, e.g. when you need\n\n\n\nADSL |&gt; \n  ard_continuous(\n    variables = AGE,\n    by = ARM, # calculate summary stats by treatment arm\n    statistic = ~list(mean = \\(x) mean(x, na.rm = TRUE)), # return the mean\n    fmt_fn = ~list(mean = 0) # format the result\n  ) |&gt; \n  apply_fmt_fn() # add a character column of rounded results\n\n{cards} data frame: 3 x 11\n\n\n  group1 group1_level variable stat_name stat_label   stat stat_fmt\n1    ARM      Placebo      AGE      mean       Mean 75.209       75\n2    ARM    Xanomeli…      AGE      mean       Mean 74.381       74\n3    ARM    Xanomeli…      AGE      mean       Mean 75.667       76\n\n\nℹ 4 more variables: context, fmt_fn, warning, error\n\n\n\n\n\n\nADSL |&gt; \n  ard_categorical(\n    by = ARM,\n    variables = AGEGR1\n  ) |&gt; \n  dplyr::filter(stat_name %in% c(\"n\", \"p\")) |&gt; # keep most common stats \n  print(n = 8)\n\n{cards} data frame: 18 x 11\n\n\n  group1 group1_level variable variable_level stat_name stat_label  stat\n1    ARM      Placebo   AGEGR1            &lt;65         n          n    14\n2    ARM      Placebo   AGEGR1            &lt;65         p          % 0.163\n3    ARM    Xanomeli…   AGEGR1            &lt;65         n          n    11\n4    ARM    Xanomeli…   AGEGR1            &lt;65         p          % 0.131\n5    ARM    Xanomeli…   AGEGR1            &lt;65         n          n     8\n6    ARM    Xanomeli…   AGEGR1            &lt;65         p          % 0.095\n7    ARM      Placebo   AGEGR1            &gt;80         n          n    30\n8    ARM      Placebo   AGEGR1            &gt;80         p          % 0.349\n\n\nℹ 10 more rows\n\n\nℹ Use `print(n = ...)` to see more rows\n\n\nℹ 4 more variables: context, fmt_fn, warning, error\n\n\n\nAny unobserved levels of the variables will be present in the resulting ARD.\n\n\n\n\n\nard_hierarchical(): similar to ard_categorical(), but built for nested tabulations, e.g. AE terms within SOC\nard_dichotomous(): similar to ard_categorical(), and tabulates a single value of the variable\nard_complex(): similar to ard_continuous(), but the summary functions can be more complex and accepts other arguments like the full and subsetted (within the by groups) data sets.\nard_missing(): tabulates rates of missingness\n\nThe results from all these functions are entirely compatible with one another, and can be stacked into a single data frame.\n\n\n\nIn addition to exporting functions to prepare summaries, {cards} exports many utilities for wrangling ARDs and creating new ARDs.\nConstructing: bind_ard(), tidy_as_ard(), nest_for_ard(), check_ard_structure(), and many more\nWrangling: shuffle_ard(), get_ard_statistics(), replace_null_statistic(), etc.\n\n\ntidy_as_ard() is USED everywhere!"
  },
  {
    "objectID": "slides/03-cards.html#cards-r-package",
    "href": "slides/03-cards.html#cards-r-package",
    "title": "{cards}",
    "section": "",
    "text": "Let’s check out a simple example\n\nlibrary(cards)\n\n# create ARD with default summary statistics\nard_continuous(ADSL, variables = AGE)\n\n{cards} data frame: 8 x 8\n\n\n  variable   context stat_name stat_label   stat fmt_fn\n1      AGE continuo…         N          N    254      0\n2      AGE continuo…      mean       Mean 75.087      1\n3      AGE continuo…        sd         SD  8.246      1\n4      AGE continuo…    median     Median     77      1\n5      AGE continuo…       p25  25th Per…     70      1\n6      AGE continuo…       p75  75th Per…     81      1\n7      AGE continuo…       min        Min     51      1\n8      AGE continuo…       max        Max     89      1\n\n\nℹ 2 more variables: warning, error\n\n\n\n\none line per statistic\nincludes default set of summary statistics\ndefault formatting function (in this case, the integer is shortcut to format/round to 1 decimal place)\na simple data frame result, which means it is easy to work with a modify"
  },
  {
    "objectID": "slides/03-cards.html#cards-ard_continuous-arguments",
    "href": "slides/03-cards.html#cards-ard_continuous-arguments",
    "title": "{cards}",
    "section": "",
    "text": "by: summary statistics are calculated by all combinations of the by variables, including unobserved factor levels\nstatistic: specify univariate summary statistics. Accepts any function, base R, from a package, or user-defined.\nfmt_fn: Override the default formatting functions, e.g. when you need\n\n\n\nADSL |&gt; \n  ard_continuous(\n    variables = AGE,\n    by = ARM, # calculate summary stats by treatment arm\n    statistic = ~list(mean = \\(x) mean(x, na.rm = TRUE)), # return the mean\n    fmt_fn = ~list(mean = 0) # format the result\n  ) |&gt; \n  apply_fmt_fn() # add a character column of rounded results\n\n{cards} data frame: 3 x 11\n\n\n  group1 group1_level variable stat_name stat_label   stat stat_fmt\n1    ARM      Placebo      AGE      mean       Mean 75.209       75\n2    ARM    Xanomeli…      AGE      mean       Mean 74.381       74\n3    ARM    Xanomeli…      AGE      mean       Mean 75.667       76\n\n\nℹ 4 more variables: context, fmt_fn, warning, error"
  },
  {
    "objectID": "slides/03-cards.html#cards-ard_categorical",
    "href": "slides/03-cards.html#cards-ard_categorical",
    "title": "{cards}",
    "section": "",
    "text": "ADSL |&gt; \n  ard_categorical(\n    by = ARM,\n    variables = AGEGR1\n  ) |&gt; \n  dplyr::filter(stat_name %in% c(\"n\", \"p\")) |&gt; # keep most common stats \n  print(n = 8)\n\n{cards} data frame: 18 x 11\n\n\n  group1 group1_level variable variable_level stat_name stat_label  stat\n1    ARM      Placebo   AGEGR1            &lt;65         n          n    14\n2    ARM      Placebo   AGEGR1            &lt;65         p          % 0.163\n3    ARM    Xanomeli…   AGEGR1            &lt;65         n          n    11\n4    ARM    Xanomeli…   AGEGR1            &lt;65         p          % 0.131\n5    ARM    Xanomeli…   AGEGR1            &lt;65         n          n     8\n6    ARM    Xanomeli…   AGEGR1            &lt;65         p          % 0.095\n7    ARM      Placebo   AGEGR1            &gt;80         n          n    30\n8    ARM      Placebo   AGEGR1            &gt;80         p          % 0.349\n\n\nℹ 10 more rows\n\n\nℹ Use `print(n = ...)` to see more rows\n\n\nℹ 4 more variables: context, fmt_fn, warning, error\n\n\n\nAny unobserved levels of the variables will be present in the resulting ARD."
  },
  {
    "objectID": "slides/03-cards.html#cards-other-summary-functions",
    "href": "slides/03-cards.html#cards-other-summary-functions",
    "title": "{cards}",
    "section": "",
    "text": "ard_hierarchical(): similar to ard_categorical(), but built for nested tabulations, e.g. AE terms within SOC\nard_dichotomous(): similar to ard_categorical(), and tabulates a single value of the variable\nard_complex(): similar to ard_continuous(), but the summary functions can be more complex and accepts other arguments like the full and subsetted (within the by groups) data sets.\nard_missing(): tabulates rates of missingness\n\nThe results from all these functions are entirely compatible with one another, and can be stacked into a single data frame."
  },
  {
    "objectID": "slides/03-cards.html#cards-other-functions",
    "href": "slides/03-cards.html#cards-other-functions",
    "title": "{cards}",
    "section": "",
    "text": "In addition to exporting functions to prepare summaries, {cards} exports many utilities for wrangling ARDs and creating new ARDs.\nConstructing: bind_ard(), tidy_as_ard(), nest_for_ard(), check_ard_structure(), and many more\nWrangling: shuffle_ard(), get_ard_statistics(), replace_null_statistic(), etc.\n\n\ntidy_as_ard() is USED everywhere!"
  },
  {
    "objectID": "slides/05-gtsummary.html",
    "href": "slides/05-gtsummary.html",
    "title": "{gtsummary}",
    "section": "",
    "text": "Born from my time as a biostatistician at Memorial Sloan Kettering Cancer Center.\nI led a team of other statisticians and I wanted us to transition to R.\nBegan writing a package that eventually became {gtsummary} to help make this transition smooth.\nSince then the package grew and grew, and is now the most downloaded summary table package on CRAN.\nPackage the American Statistical Association’s (ASA) 2021 award for Innovation in Statistical Programming and Analytics\n\n\n\n\n\n\n\n\n\n\n\ngtsummary tables are composable, that leads to a wonderful user experience\nno more needing to memorize an enormous function with too many arguments\n\n\n\n\n\n\n\n\n\n\n\n\na gtsummary table can be converted into any of these types, and styling and formatting functions from those packages can be used to continue to make the table exactly as you’d like.\neach of these engines have their own strengths\nthere is a lot more i could share about the package: I’ve never given a three-slide summary of its features before!\n\n\n\n\n\nHow is this related to ARD and the {cards} package? 🤔🤔\n\nThe {cards} package does not present results and this is where the {gtsummary} package shines.\nThe {gtsummary} package is currently being refactored with a {cards} backend.\nIn addition to a refactor, adding new features making it easier to create common pharma tables.\n\n\n\n\n\n\n\n\n\n\n\nExpect new releases of {cards}, {cardx}, and {gtsummary} soon!\nThese packages working together will serve as a strong combination for ARD-first TLG creation in the pharmaceutical space.\n\n\n\n\n\n\n\n\n\n\n\n\nAnd I will get to these hux logos too!\nIf you have suggestions, please join the conversation.\n\nAny questions??\n\n\n\n\n\n\nWith {cards}+{gtsummary} it’s easy to create bespoke table shells.\n\n\ncards::ADSL |&gt; \n  cards::ard_continuous(\n    variables = AGE, \n    fmt_fn = ~list(everything() ~ \\(x) \"xx\")\n  ) |&gt; \n  cards::apply_fmt_fn() |&gt; \n  print(n = 3)\n\n{cards} data frame: 8 x 9\n\n\n  variable   context stat_name stat_label   stat stat_fmt\n1      AGE continuo…         N          N    254       xx\n2      AGE continuo…      mean       Mean 75.087       xx\n3      AGE continuo…        sd         SD  8.246       xx\n\n\nℹ 5 more rows\n\n\nℹ Use `print(n = ...)` to see more rows\n\n\nℹ 3 more variables: fmt_fn, warning, error\n\n\n\nPass this ARD to card_summary() and the table will be populated with \"xx\" placeholders.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nPlacebo\nN = xx\nXanomeline Low Dose\nN = xx\nXanomeline High Dose\nN = xx\n\n\n\n\nAge\n\n\n\n\n\n\n\n\n    Median (IQR)\nxx (xx, xx)\nxx (xx, xx)\nxx (xx, xx)\n\n\n    Mean (SD)\nxx (xx)\nxx (xx)\nxx (xx)\n\n\n    Range\nxx - xx\nxx - xx\nxx - xx\n\n\nAge Group, n (%)\n\n\n\n\n\n\n\n\n    &lt;65\nxx (xx.x%)\nxx (xx.x%)\nxx (xx.x%)\n\n\n    65-80\nxx (xx.x%)\nxx (xx.x%)\nxx (xx.x%)\n\n\n    &gt;80\nxx (xx.x%)\nxx (xx.x%)\nxx (xx.x%)"
  },
  {
    "objectID": "slides/05-gtsummary.html#gtsummary-background",
    "href": "slides/05-gtsummary.html#gtsummary-background",
    "title": "{gtsummary}",
    "section": "",
    "text": "Born from my time as a biostatistician at Memorial Sloan Kettering Cancer Center.\nI led a team of other statisticians and I wanted us to transition to R.\nBegan writing a package that eventually became {gtsummary} to help make this transition smooth.\nSince then the package grew and grew, and is now the most downloaded summary table package on CRAN.\nPackage the American Statistical Association’s (ASA) 2021 award for Innovation in Statistical Programming and Analytics"
  },
  {
    "objectID": "slides/05-gtsummary.html#gtsummary-r-package",
    "href": "slides/05-gtsummary.html#gtsummary-r-package",
    "title": "{gtsummary}",
    "section": "",
    "text": "gtsummary tables are composable, that leads to a wonderful user experience\nno more needing to memorize an enormous function with too many arguments"
  },
  {
    "objectID": "slides/05-gtsummary.html#gtsummary-r-package-1",
    "href": "slides/05-gtsummary.html#gtsummary-r-package-1",
    "title": "{gtsummary}",
    "section": "",
    "text": "a gtsummary table can be converted into any of these types, and styling and formatting functions from those packages can be used to continue to make the table exactly as you’d like.\neach of these engines have their own strengths\nthere is a lot more i could share about the package: I’ve never given a three-slide summary of its features before!"
  },
  {
    "objectID": "slides/05-gtsummary.html#cards-gtsummary",
    "href": "slides/05-gtsummary.html#cards-gtsummary",
    "title": "{gtsummary}",
    "section": "",
    "text": "How is this related to ARD and the {cards} package? 🤔🤔\n\nThe {cards} package does not present results and this is where the {gtsummary} package shines.\nThe {gtsummary} package is currently being refactored with a {cards} backend.\nIn addition to a refactor, adding new features making it easier to create common pharma tables."
  },
  {
    "objectID": "slides/05-gtsummary.html#stay-tuned",
    "href": "slides/05-gtsummary.html#stay-tuned",
    "title": "{gtsummary}",
    "section": "",
    "text": "Expect new releases of {cards}, {cardx}, and {gtsummary} soon!\nThese packages working together will serve as a strong combination for ARD-first TLG creation in the pharmaceutical space.\n\n\n\n\n\n\n\n\n\n\n\n\nAnd I will get to these hux logos too!\nIf you have suggestions, please join the conversation.\n\nAny questions??"
  },
  {
    "objectID": "slides/05-gtsummary.html#mock-tables",
    "href": "slides/05-gtsummary.html#mock-tables",
    "title": "{gtsummary}",
    "section": "",
    "text": "With {cards}+{gtsummary} it’s easy to create bespoke table shells.\n\n\ncards::ADSL |&gt; \n  cards::ard_continuous(\n    variables = AGE, \n    fmt_fn = ~list(everything() ~ \\(x) \"xx\")\n  ) |&gt; \n  cards::apply_fmt_fn() |&gt; \n  print(n = 3)\n\n{cards} data frame: 8 x 9\n\n\n  variable   context stat_name stat_label   stat stat_fmt\n1      AGE continuo…         N          N    254       xx\n2      AGE continuo…      mean       Mean 75.087       xx\n3      AGE continuo…        sd         SD  8.246       xx\n\n\nℹ 5 more rows\n\n\nℹ Use `print(n = ...)` to see more rows\n\n\nℹ 3 more variables: fmt_fn, warning, error\n\n\n\nPass this ARD to card_summary() and the table will be populated with \"xx\" placeholders."
  },
  {
    "objectID": "slides/05-gtsummary.html#mock-tables-1",
    "href": "slides/05-gtsummary.html#mock-tables-1",
    "title": "{gtsummary}",
    "section": "",
    "text": "Characteristic\nPlacebo\nN = xx\nXanomeline Low Dose\nN = xx\nXanomeline High Dose\nN = xx\n\n\n\n\nAge\n\n\n\n\n\n\n\n\n    Median (IQR)\nxx (xx, xx)\nxx (xx, xx)\nxx (xx, xx)\n\n\n    Mean (SD)\nxx (xx)\nxx (xx)\nxx (xx)\n\n\n    Range\nxx - xx\nxx - xx\nxx - xx\n\n\nAge Group, n (%)\n\n\n\n\n\n\n\n\n    &lt;65\nxx (xx.x%)\nxx (xx.x%)\nxx (xx.x%)\n\n\n    65-80\nxx (xx.x%)\nxx (xx.x%)\nxx (xx.x%)\n\n\n    &gt;80\nxx (xx.x%)\nxx (xx.x%)\nxx (xx.x%)"
  }
]